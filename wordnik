#!/bin/sh

## Your wordnick.com user.name, password and authentication key
user_name="WORDNIK USERNAME"
password="WORDNIK PASSWORD"
apiKey="WORDNIK API"
TOKENFILE="PLACE WHERE YOU'D LIKE TO KEEP YOUR TOKEN FILE"

## In order to use the API, we must authenticate first
## then we get a token and use this token until it expires.
if [ -e $TOKENFILE ] ; then
   token=`awk '{ print $2; }' $TOKENFILE`
   URL="-H api_key:$apiKey -H token:$token http://api.wordnik.com/v4"
else
   URL="-H api_key:$apiKey http://api.wordnik.com/v4"
   results=`curl $URL/account.json/apiTokenStatus 2> /dev/null | cut -c3-4`
   if [ $results = "va" ] ; then
      echo "\n * Your token is valid! * \n"
   else
      results=`curl -H api_key:$apiKey http://api.wordnik.com/v4/account.json/authenticate/$user_name?password=$password 2> /dev/null`
      echo $results | sed -e 's/[{}]//g; s/[,:]//g; s/"/\ /g;' > $TOKENFILE
   fi 
fi

## This is where the dirty magic happens
if [ ! -z $2 ] ; then
   if [ $2 = "defn" ]; then
      curl $URL/word.json/$1/definitions 2> /dev/null | sed -e 's:},{:\n:g; s:[\[{\]}]::g; s/",/":/g;' | awk -F\": '{ print $4; }' | sed -e 's/^"//g'
   fi
elif [ -z $1 ] ; then 
   echo "Available options are" 
   echo "wordnik WORD     : Check if a word is in the local dictionary (uses aspell)"
   echo "wordnik WORD defn: Find the the definition of a word (uses wordnik)"
else 
   echo $1 | /usr/bin/aspell -a -c list 2> /dev/null | awk -F: '{ print $2;}' | sed -e 's/,/\n/g; /^$/d;'
fi
